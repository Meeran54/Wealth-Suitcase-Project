{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94330472-ed76-4018-9d68-afa2417bfae6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "# Title of the app\n",
    "st.title(\"Investor Profiling Form\")\n",
    "\n",
    "# Define a Streamlit form to batch input fields (avoids rerunning on each change):contentReference[oaicite:7]{index=7}\n",
    "with st.form(\"investor_form\"):\n",
    "    st.write(\"Enter your financial details below:\")\n",
    "    \n",
    "    # Collect input fields\n",
    "    name = st.text_input(\"Name\")\n",
    "    age = st.number_input(\"Age\", min_value=0, max_value=120, value=30, step=1)\n",
    "    occupation = st.selectbox(\"Occupation\", [\"Employed\", \"Business Owner\", \"Retired\", \"Student\", \"Unemployed\", \"Other\"])\n",
    "    income = st.number_input(\"Monthly Income (₹)\", min_value=0.0, value=0.0, step=1.0, format=\"%.2f\")\n",
    "    fixed_expenses = st.number_input(\"Fixed Expenses (₹)\", min_value=0.0, value=0.0, step=1.0, format=\"%.2f\")\n",
    "    variable_expenses = st.number_input(\"Variable Expenses (₹)\", min_value=0.0, value=0.0, step=1.0, format=\"%.2f\")\n",
    "    risk_appetite = st.selectbox(\"Risk Appetite\", [\"Conservative\", \"Moderate\", \"Aggressive\"])\n",
    "    \n",
    "    # Financial goals with multiselect and custom input\n",
    "    goals_options = [\"Retirement\", \"Home Purchase\", \"Education\", \"Travel\", \"Wealth Accumulation\", \"Debt Repayment\", \"Emergency Fund\"]\n",
    "    financial_goals = st.multiselect(\"Financial Goals\", options=goals_options)\n",
    "    custom_goal = st.text_input(\"Or add a custom goal\")\n",
    "    if custom_goal:\n",
    "        financial_goals.append(custom_goal)\n",
    "    \n",
    "    savings = st.number_input(\"Total Savings and Investments (₹)\", min_value=0.0, value=0.0, step=1.0, format=\"%.2f\")\n",
    "    \n",
    "    # Submit button for the form\n",
    "    submit = st.form_submit_button(\"Submit\")\n",
    "\n",
    "# When form is submitted, compute scores and save data\n",
    "if submit:\n",
    "    # Compute individual scores based on given criteria\n",
    "    if age < 30:\n",
    "        age_score = 2\n",
    "    elif age <= 45:\n",
    "        age_score = 1\n",
    "    else:\n",
    "        age_score = 0\n",
    "\n",
    "    if income > 200000:\n",
    "        income_score = 2\n",
    "    elif income >= 50000:\n",
    "        income_score = 1\n",
    "    else:\n",
    "        income_score = 0\n",
    "\n",
    "    if savings > 500000:\n",
    "        savings_score = 2\n",
    "    elif savings >= 100000:\n",
    "        savings_score = 1\n",
    "    else:\n",
    "        savings_score = 0\n",
    "\n",
    "    # Calculate expense percentage safely (avoid division by zero)\n",
    "    if income > 0:\n",
    "        expense_pct = (fixed_expenses + variable_expenses) / income\n",
    "    else:\n",
    "        expense_pct = 0\n",
    "    if expense_pct < 0.4:\n",
    "        expense_score = 2\n",
    "    elif expense_pct <= 0.7:\n",
    "        expense_score = 1\n",
    "    else:\n",
    "        expense_score = 0\n",
    "\n",
    "    # Risk appetite score mapping\n",
    "    if risk_appetite == \"Aggressive\":\n",
    "        appetite_score = 2\n",
    "    elif risk_appetite == \"Moderate\":\n",
    "        appetite_score = 1\n",
    "    else:  # Conservative\n",
    "        appetite_score = 0\n",
    "\n",
    "    # Sum total score\n",
    "    total_score = age_score + income_score + savings_score + expense_score + appetite_score\n",
    "\n",
    "    # Determine investor type based on total score\n",
    "    if total_score <= 3:\n",
    "        investor_type = \"Capital Preserver\"\n",
    "    elif total_score <= 6:\n",
    "        investor_type = \"Balanced Planner\"\n",
    "    else:\n",
    "        investor_type = \"Growth Seeker\"\n",
    "\n",
    "    # Prepare data row to save\n",
    "    data = {\n",
    "        \"Name\": name,\n",
    "        \"Age\": age,\n",
    "        \"Occupation\": occupation,\n",
    "        \"Income\": income,\n",
    "        \"Fixed Expenses\": fixed_expenses,\n",
    "        \"Variable Expenses\": variable_expenses,\n",
    "        \"Risk Appetite\": risk_appetite,\n",
    "        \"Financial Goals\": \", \".join(financial_goals),\n",
    "        \"Savings\": savings,\n",
    "        \"Score\": total_score,\n",
    "        \"Investor Type\": investor_type\n",
    "    }\n",
    "\n",
    "    # Path to Excel file\n",
    "    file_path = \"investor_data.xlsx\"\n",
    "    \n",
    "    # If file exists, load and append; otherwise create new DataFrame\n",
    "    if os.path.exists(file_path):  # Check file existence:contentReference[oaicite:8]{index=8}\n",
    "        df_existing = pd.read_excel(file_path)  # Read existing data:contentReference[oaicite:9]{index=9}\n",
    "        df_new = pd.DataFrame([data])\n",
    "        df_final = pd.concat([df_existing, df_new], ignore_index=True)\n",
    "    else:\n",
    "        df_final = pd.DataFrame([data])\n",
    "    \n",
    "    # Write to Excel (this creates or overwrites the file):contentReference[oaicite:10]{index=10}\n",
    "    df_final.to_excel(file_path, index=False)\n",
    "    \n",
    "    st.success(\"Your information has been submitted successfully.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
